"""
Mock AI Service - —ç–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã AI-–º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É AI API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã,
–Ω–µ —Ç—Ä–µ–±—É—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º API (DeepSeek, GigaChat).

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è USE_MOCK_AI=true
2. –ò–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ ai_service –≤ main.py
"""

import os
import logging
import asyncio
import random
from typing import List, AsyncGenerator, Optional

logger = logging.getLogger(__name__)


class MockAIService:
    """
    Mock AI Service –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã AI-–º–æ–¥–µ–ª–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API.
    
    –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å:
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ –∂–µ –º–µ—Ç–æ–¥—ã —á—Ç–æ –∏ –Ω–∞—Å—Ç–æ—è—â–∏–π AIService
    - –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    RESPONSE_TEMPLATES = {
        "greeting": [
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º. ",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? ",
            "–î–∞–≤–∞–π—Ç–µ –∏–∑—É—á–∏–º —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤–º–µ—Å—Ç–µ. ",
        ],
        "explanation": [
            "–°—É–¥—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É, ",
            "–°–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}, ",
            "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è, —á—Ç–æ ",
        ],
        "detail": [
            "–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ, ",
            "–ï—Å–ª–∏ —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –¥–µ—Ç–∞–ª–∏, ",
            "–í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ ",
        ],
        "conclusion": [
            "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, ",
            "–í –∏—Ç–æ–≥–µ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ ",
            "–†–µ–∑—é–º–∏—Ä—É—è –≤—ã—à–µ—Å–∫–∞–∑–∞–Ω–Ω–æ–µ, ",
        ]
    }
    
    # –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    RANDOM_FACTS = [
        "—ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ ",
        "–∑–¥–µ—Å—å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã ",
        "–≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è ",
        "—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ—Å–≤—è—â–µ–Ω ",
        "–º–∞—Ç–µ—Ä–∏–∞–ª –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–∫–∏–µ —Ç–µ–º—ã –∫–∞–∫ ",
        "–≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è ",
        "—ç—Ç–æ —á–∞—Å—Ç—å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–π —Ç–µ–º—ã ",
    ]
    
    # –¢–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    TOPICS = [
        "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã", "–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é", "–ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã",
        "—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã", "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "–∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏", "–≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏", "–æ—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã",
        "—Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã", "–æ–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è"
    ]
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mock AI Service"""
        self.context_pages = int(os.getenv("CHAT_CONTEXT_PAGES", "2"))
        logger.info("üîß Mock AI Service initialized (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
    
    async def extract_text_from_pdf(self, pdf_url: str, page_numbers: List[int]) -> str:
        """
        –≠–º—É–ª—è—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF.
        
        Args:
            pdf_url: URL –¥–æ–∫—É–º–µ–Ω—Ç–∞
            page_numbers: –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ PDF
        """
        logger.debug(f"üìÑ Mock: Extracting text from pages {page_numbers}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(0.1)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü
        text_parts = []
        for page_num in page_numbers:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_text = self._generate_mock_page_content(page_num)
            text_parts.append(f"--- Page {page_num} ---\n{page_text}")
        
        return "\n\n".join(text_parts)
    
    def build_context_pages(self, current_page: int, total_pages: int, 
                           context_type: str = "page", chapter_info: Optional[dict] = None) -> List[int]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ).
        
        Args:
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            context_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            chapter_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–µ
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        pages = set()
        
        if context_type == "document":
            # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å –ª–∏–º–∏—Ç–æ–º)
            max_pages = 50
            for i in range(1, min(total_pages, max_pages) + 1):
                pages.add(i)
        elif context_type in ["chapter", "section"] and chapter_info:
            # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –≥–ª–∞–≤–µ/—Å–µ–∫—Ü–∏–∏
            page_from = chapter_info.get("pageFrom", current_page)
            page_to = chapter_info.get("pageTo", current_page)
            for page_num in range(page_from, min(page_to + 1, total_pages + 1)):
                if page_num >= 1:
                    pages.add(page_num)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–µ–∫—É—â–∞—è + –æ–∫—Ä—É–∂–∞—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            pages.add(current_page)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for i in range(1, self.context_pages + 1):
                if current_page - i >= 1:
                    pages.add(current_page - i)
                if current_page + i <= total_pages:
                    pages.add(current_page + i)
        
        return sorted(list(pages))
    
    async def generate_response_stream_no_context(
        self, 
        messages: List[dict]
    ) -> AsyncGenerator[str, None]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            
        Yields:
            –¢–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞ –ø–æ –º–µ—Ä–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        logger.debug(f"ü§ñ Mock: Generating response without context")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_message = messages[-1]["content"] if messages else "–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await self._generate_mock_response(last_message, has_context=False)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ (–≤—ã–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ)
        words = response.split()
        for i, word in enumerate(words):
            yield word
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            if i < len(words) - 1:  # –ù–µ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞
                delay = random.uniform(0.01, 0.05)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 10-50ms
                await asyncio.sleep(delay)
    
    async def generate_response_stream(
        self, 
        messages: List[dict], 
        pdf_url: str, 
        current_page: int, 
        total_pages: int,
        context_type: str = "page",
        chapter_info: Optional[dict] = None
    ) -> AsyncGenerator[str, None]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            pdf_url: URL PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            context_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            chapter_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–µ
            
        Yields:
            –¢–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞ –ø–æ –º–µ—Ä–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        logger.debug(f"ü§ñ Mock: Generating response with context (page {current_page}, context: {context_type})")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_message = messages[-1]["content"] if messages else "–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await self._generate_mock_response(
            last_message, 
            has_context=True,
            page=current_page,
            context_type=context_type
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
        words = response.split()
        for i, word in enumerate(words):
            yield word + " "  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            if i < len(words) - 1:
                delay = random.uniform(0.01, 0.05)
                await asyncio.sleep(delay)
    
    def _generate_mock_page_content(self, page_num: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏"""
        topic = random.choice(self.TOPICS)
        fact = random.choice(self.RANDOM_FACTS)
        
        content = f"""
–≠—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ó–¥–µ—Å—å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è {topic}.
–ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–µ–º—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –∞–≤—Ç–æ—Ä {fact}—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º –∏–∑—É—á–µ–Ω–∏—è.
–í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
        """
        
        return content.strip()
    
    async def _generate_mock_response(
        self, 
        user_message: str,
        has_context: bool = True,
        page: Optional[int] = None,
        context_type: Optional[str] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ AI.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            has_context: –ï—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            context_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–Ω –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_lower = user_message.lower()
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω
        if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é"]):
            greeting = random.choice(self.RESPONSE_TEMPLATES["greeting"])
            return f"{greeting}–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å."
        
        # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_parts = []
        
        # –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        if has_context and page:
            if context_type == "chapter":
                response_parts.append(random.choice([
                    f"–°–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —ç—Ç–æ–π –≥–ª–∞–≤—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞, ",
                    f"–ò–∑—É—á–∏–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã, —è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ ",
                ]))
            elif context_type == "document":
                response_parts.append(random.choice([
                    f"–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, ",
                    f"–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ü–µ–ª–æ–º, ",
                ]))
            else:
                response_parts.append(random.choice([
                    f"–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page} —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è, —á—Ç–æ ",
                    f"–°–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}, ",
                ]))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        explanation = random.choice(self.RESPONSE_TEMPLATES["explanation"])
        topic = random.choice(self.TOPICS)
        fact = random.choice(self.RANDOM_FACTS)
        
        main_part = f"{explanation}{fact}{topic}. "
        if page:
            main_part = main_part.replace("{page}", str(page))
        
        response_parts.append(main_part)
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
        if random.random() > 0.3:  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏
            detail_part = random.choice(self.RESPONSE_TEMPLATES["detail"])
            more_info = random.choice([
                "–≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤.",
                "—Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
                "–º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.",
            ])
            response_parts.append(f"{detail_part}{more_info} ")
        
        # –í—ã–≤–æ–¥
        if random.random() > 0.4:  # 60% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥
            conclusion_part = random.choice(self.RESPONSE_TEMPLATES["conclusion"])
            conclusion_text = random.choice([
                "—ç—Ç–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ–±—â–µ–π –∫–∞—Ä—Ç–∏–Ω—ã.",
                "–¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
                "—ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏–∑—É—á–µ–Ω–∏–∏.",
            ])
            response_parts.append(f"{conclusion_part}{conclusion_text}")
        
        return "".join(response_parts)
    
    def clear_token_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º)"""
        logger.debug("Mock: Clearing token cache (no-op)")
        pass
    
    def get_token_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ (–¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º)"""
        logger.debug("Mock: Getting token info (no-op)")
        return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
mock_ai_service = MockAIService()

# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
AIService = MockAIService
ai_service = mock_ai_service

